// src/components/submodules/DocumentManagement/CheckListMaster.jsx
import React,{useEffect,useRef,useState,useMemo,useCallback} from 'react';
import {supabase} from '../../../utils/supabaseClient';
import {useAuth} from '../../../contexts/AuthContext';
import toast from 'react-hot-toast';
import {useReactToPrint} from 'react-to-print';
import {
  ClipboardList,Save,Edit3,Trash2,Plus,Loader2,RotateCcw,Printer,Eye,
  XCircle,Send,ShieldCheck,Database,Upload,AlertTriangle,Search, RefreshCw, Info, Lock
} from 'lucide-react';
import logo from '../../../assets/logo.png';

/* ---------- helpers ---------- */
const cls = (...a) => a.filter(Boolean).join(' ');
const isAdminLike = (role) =>
  Array.isArray(role)
    ? role.some((r) => ['Super Admin', 'Admin'].includes(r))
    : typeof role === 'string' && ['Super Admin', 'Admin'].includes(role);

const fmtDT = (iso) => {
  if(!iso) return '-';
  try {
    const d = new Date(iso);
    const pad = (n)=>String(n).padStart(2,'0');
    return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
  } catch { return String(iso); }
};

/* Treat blank strings as NULL for DB-typed fields */
const DATE_FIELDS = [
  'effective_date',
  'date_of_receipt',
  'inspection_date',
  'submitted_at',
  'approved_at',
];
const nullifyTypedEmpties = (obj) => {
  const copy = { ...obj };
  DATE_FIELDS.forEach((k) => {
    if (copy[k] === '' || copy[k] === undefined) copy[k] = null;
  });
  return copy;
};

// NEW: unified status (Active/Inactive) label
const statusLabel = (r) => {
  const v = r?.status ?? r?.is_active ?? r?.active;
  return v === false ? 'Inactive' : 'Active';
};

/* ---------- default header placeholders + flags ---------- */
const DEFAULT_HEADER_META=()=>({
  // Branding / print
  org_name:'DigitizerX',
  logo_url:'',
  print_footer_text:'Generated by DigitizerX',

  // placeholders
  checklist_name:'Inspection Checklist name/title',
  sop_reference:'SOP reference',
  version:'Version',
  effective_date:'YYYY-MM-DD',
  prepared_by:'Name',
  reviewed_by:'Name',
  approved_by:'Name',
  material_name:'Material name',
  batch_no:'Batch/Lot No.',
  supplier:'Supplier/Vendor',
  date_of_receipt:'YYYY-MM-DD',
  quantity_received:'Qty (units)',
  storage_condition:'e.g., Room temp',
  inspection_date:'YYYY-MM-DD',
  inspected_by:'Inspector name',

  // persisted value mirror for legacy flows
  checklist_name_value:'',

  // section visibility
  show_visual:true,
  show_doc:true,
  show_test:true,

  // predefined header field visibility (new)
  show_material_name:true,
  show_batch_no:true,
  show_supplier:true,
  show_date_of_receipt:true,
  show_quantity_received:true,
  show_storage_condition:true,
  show_inspection_date:true,
  show_inspected_by:true,
  show_linked_entity_id:true,

  // Signature timestamps (ISO)
  prepared_signed_at:'',
  reviewed_signed_at:'',
  approved_signed_at:''
});

/* ---------- default column schemas (with placeholders) ---------- */
const DEFAULT_VISUAL_COLS=()=>([
  {key:'checkpoint',label:'Checkpoint',type:'text',required:true,placeholder:'e.g., Intact packaging'},
  {key:'acceptance',label:'Acceptance Criteria',type:'text',placeholder:'e.g., No tears, leaks, or damage'},
  {key:'compliant',label:'Compliant (✔/✖)',type:'checkbox',placeholder:''},
  {key:'remarks',label:'Remarks',type:'text',placeholder:'Optional notes'}
]);
const DEFAULT_DOC_COLS=()=>([
  {key:'checkpoint',label:'Checkpoint',type:'text',required:true,placeholder:'e.g., Certificate of Analysis (CoA)'},
  {key:'acceptance',label:'Acceptance Criteria',type:'text',placeholder:'e.g., Verified & authentic'},
  {key:'compliant',label:'Compliant (✔/✖)',type:'checkbox',placeholder:''},
  {key:'remarks',label:'Remarks',type:'text',placeholder:'Optional notes'}
]);
const DEFAULT_TEST_COLS=()=>([
  {key:'parameter',label:'Test Parameter',type:'text',required:true,placeholder:'e.g., pH Level'},
  {key:'specification',label:'Specification',type:'text',placeholder:'e.g., As per standard'},
  {key:'result',label:'Result',type:'text',placeholder:'Enter result'},
  {key:'acceptable',label:'Acceptable (Y/N)',type:'checkbox',placeholder:''}
]);

/* ---------- rows start empty ---------- */
const DEFAULT_VISUAL_ROWS=()=>([]);
const DEFAULT_DOC_ROWS=()=>([]);
const DEFAULT_TEST_ROWS=()=>([]);

/* ---------- Print helpers ---------- */
const PrintStyles = () => (
  <style>{`
    @media print {
      body { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
      .print-a4 { width: 210mm; margin: 0 auto; }
      .no-break-inside { break-inside: avoid; page-break-inside: avoid; }
      .page-break-before { page-break-before: always; }
      table { page-break-inside: auto; }
      tr, td, th { break-inside: avoid; page-break-inside: avoid; }
      .print-header { position: relative; padding-bottom: 8px; border-bottom: 1px solid #ddd; }
      .print-footer { position: relative; margin-top: 8px; border-top: 1px solid #ddd; }
    }
  `}</style>
);

/* Overall status as 3-box UI (for preview/print) */
const OverallStatusBoxes = ({value}) => {
  const v = String(value || '').toLowerCase();
  const box = (k) => (v === k ? '☑' : '☐');
  return (
    <div className="flex items-center gap-6">
      <span>Accepted {box('accepted')}</span>
      <span>Rejected {box('rejected')}</span>
      <span>Quarantine {box('quarantine')}</span>
    </div>
  );
};

/* ---------- Dynamic grid for any section ---------- */
const types=['text','checkbox','number','textarea'];
const DynamicGrid=({title,columns,rows,onChangeColumns,onChangeRows,canAdmin,readOnly,onHide,currentUserEmail})=>{
  const addColumn=()=>{
    const key=`col_${Math.random().toString(36).slice(2,7)}`;
    const nextCols=[...(columns||[]),{key,label:'New Column',type:'text',required:false,placeholder:''}];
    const nextRows=(rows||[]).map((r)=>({...r,[key]:''}));
    onChangeColumns(nextCols);
    onChangeRows(nextRows);
  };
  const removeColumn=(key)=>{
    onChangeColumns((columns||[]).filter((c)=>c.key!==key));
    onChangeRows((rows||[]).map(({[key]:_,[`${key}__audit`]:_a,...rest})=>rest));
  };
  const updateHeader=(idx,patch)=>{
    const next=[...(columns||[])]; next[idx]={...next[idx],...patch}; onChangeColumns(next);
  };
  const addRow=()=>onChangeRows([...(rows||[]),{}]);
  const removeRow=(idx)=>onChangeRows((rows||[]).filter((_,i)=>i!==idx));
  const updateCell=(ridx,key,val)=>{
    const next=[...(rows||[])]; next[ridx]={...(next[ridx]||{}),[key]:val}; onChangeRows(next);
  };
  const setCheckbox=(ridx,key,val)=>{
    const next=[...(rows||[])];
    const row={...(next[ridx]||{})};
    row[key]=val;
    row[`${key}__audit`] = { by: currentUserEmail || '-', at: new Date().toISOString(), value: val===true?'✔':(val===false?'✖':'') };
    next[ridx]=row;
    onChangeRows(next);
  };

  // Generic 2-box toggle used for ANY checkbox column
  const TwoBoxToggle = ({value,onChange,disabled}) => (
    <div className="inline-flex items-center justify-center gap-4">
      <label className="inline-flex items-center gap-1 text-sm">
        <input
          type="checkbox"
          checked={value===true}
          onChange={()=>{ if(!disabled) onChange(value===true ? undefined : true); }}
          disabled={disabled}
        />
        ✔
      </label>
      <label className="inline-flex items-center gap-1 text-sm">
        <input
          type="checkbox"
          checked={value===false}
          onChange={()=>{ if(!disabled) onChange(value===false ? undefined : false); }}
          disabled={disabled}
        />
        ✖
      </label>
    </div>
  );

  return (
    <>
      <div className="mt-6 mb-2 flex items-center gap-2">
        <ClipboardList size={18}/><h3 className="text-lg font-semibold">{title}</h3>
        {canAdmin&&!readOnly&&(
          <div className="ml-auto flex gap-2">
            <button onClick={addColumn} className="border rounded px-2 py-1 text-xs">Add Column</button>
            <button onClick={addRow} className="border rounded px-2 py-1 text-xs">Add Row</button>
            {onHide && <button onClick={onHide} className="border rounded px-2 py-1 text-xs text-red-600"><Trash2 size={12}/> Hide Section</button>}
          </div>
        )}
      </div>
      <div className="overflow-auto">
        <table className="min-w-[900px] w-full border rounded-md">
          <thead className="bg-gray-50">
            <tr>
              {(columns||[]).map((c,idx)=>(
                <th key={c.key} className="border p-2 align-top text-center">
                  {canAdmin&&!readOnly?(
                    <div className="flex flex-col gap-1">
                      <input className="border rounded px-2 py-1 w-full text-center" value={c.label||''} onChange={(e)=>updateHeader(idx,{label:e.target.value})} placeholder="Column label"/>
                      <div className="flex items-center justify-center gap-2">
                        <select className="border rounded px-2 py-1 text-xs" value={c.type||'text'} onChange={(e)=>updateHeader(idx,{type:e.target.value})}>
                          {types.map((t)=><option key={t} value={t}>{t}</option>)}
                        </select>
                        <label className="text-xs flex items-center gap-1">
                          <input type="checkbox" checked={!!c.required} onChange={(e)=>updateHeader(idx,{required:e.target.checked})}/>
                          required
                        </label>
                        <button onClick={()=>removeColumn(c.key)} className="text-red-600 text-xs">Delete</button>
                      </div>
                      <input className="border rounded px-2 py-1 w-full text-xs text-center" value={c.placeholder||''} onChange={(e)=>updateHeader(idx,{placeholder:e.target.value})} placeholder="Placeholder (shown in cells)"/>
                    </div>
                  ):(
                    <span>{c.label}</span>
                  )}
                </th>
              ))}
              <th className="border p-2 w-12"></th>
            </tr>
          </thead>
          <tbody>
            {(rows||[]).map((r,ridx)=>(
              <tr key={`row-${ridx}`}>
                {(columns||[]).map((c)=>(
                  <td key={`${ridx}-${c.key}`} className="border p-2 text-center">
                    {c.type==='checkbox' ? (
                      <>
                        <TwoBoxToggle
                          value={r[c.key]}
                          onChange={(val)=>setCheckbox(ridx,c.key,val)}
                          disabled={readOnly}
                        />
                        {r[`${c.key}__audit`] && (
                          <div className="text-[10px] text-gray-500 mt-1">
                            {r[`${c.key}__audit`].value || ''} by {r[`${c.key}__audit`].by || '-'} on {fmtDT(r[`${c.key}__audit`].at)}
                          </div>
                        )}
                      </>
                    ) : c.type==='textarea' ? (
                      <textarea
                        className={cls('border rounded w-full px-2 py-1 text-center',readOnly&&'bg-gray-100')}
                        value={r[c.key]||''}
                        onChange={(e)=>updateCell(ridx,c.key,e.target.value)}
                        disabled={readOnly}
                        placeholder={c.placeholder||''}
                      />
                    ) : (
                      <input
                        type={c.type==='number'?'number':'text'}
                        className={cls('border rounded w-full px-2 py-1 text-center',readOnly&&'bg-gray-100')}
                        value={r[c.key]||''}
                        onChange={(e)=>updateCell(ridx,c.key,e.target.value)}
                        disabled={readOnly}
                        placeholder={c.placeholder||''}
                      />
                    )}
                  </td>
                ))}
                <td className="border p-2 text-center">
                  {canAdmin&&!readOnly&&(<button onClick={()=>removeRow(ridx)} className="text-red-600 text-xs">Delete</button>)}
                </td>
              </tr>
            ))}
            {(rows||[]).length===0&&(
              <tr><td colSpan={((columns||[]).length||1)+1} className="text-center text-gray-500 p-3 text-sm">No rows yet</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </>
  );
};

/* ---------- Placeholders editor per section ---------- */
const PlaceholdersPanel=({label,placeholders,setPlaceholders,applyToRows,disabled})=>{
  const [bulk,setBulk]=useState('');
  const addOne=()=>setPlaceholders([...(placeholders||[]),'' ]);
  const removeAt=(idx)=>setPlaceholders((placeholders||[]).filter((_,i)=>i!==idx));
  const updateAt=(idx,val)=>setPlaceholders((placeholders||[]).map((p,i)=>i===idx?val:p));
  const bulkAdd=()=>{
    const lines=(bulk||'').split('\n').map((s)=>s.trim()).filter((s)=>s.length>0);
    if(lines.length===0){toast.error('Nothing to add'); return;}
    setPlaceholders([...(placeholders||[]),...lines]);
    setBulk('');
  };
  const add16Blanks=()=>{
    const blanks=Array.from({length:16},()=> '');
    setPlaceholders([...(placeholders||[]),...blanks]);
  };
  
  return (
    <div className="border rounded-md p-3 mt-4">
      <div className="flex items-center gap-2">
        <div className="font-semibold">{label} Placeholders</div>
        <div className="text-xs text-gray-500">({placeholders?.length||0})</div>
        <div className="ml-auto flex gap-2">
          <button className="border rounded px-2 py-1 text-xs" onClick={addOne} disabled={disabled}>+1</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={add16Blanks} disabled={disabled}>+16 blanks</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyToRows('append')} disabled={disabled||!(placeholders||[]).length}>Append → Rows</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyToRows('replace')} disabled={disabled||!(placeholders||[]).length}>Replace Rows</button>
        </div>
      </div>

      <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-3">
        <div className="space-y-2">
          {(placeholders||[]).map((p,idx)=>(
            <div key={idx} className="flex items-center gap-2">
              <input className="border rounded px-2 py-1 w-full" value={p} onChange={(e)=>updateAt(idx,e.target.value)} placeholder={`Placeholder ${idx+1}`} disabled={disabled}/>
              <button className="text-red-600 text-xs" onClick={()=>removeAt(idx)} disabled={disabled}>Delete</button>
            </div>
          ))}
          {(placeholders||[]).length===0&&(
            <div className="text-xs text-gray-500">No placeholders yet. Use +1, +16 blanks or Bulk Add.</div>
          )}
        </div>
        <div>
          <label className="text-sm text-gray-600">Bulk Add (one per line)</label>
          <textarea className="border rounded w-full px-2 py-2 min-h-[120px]" value={bulk} onChange={(e)=>setBulk(e.target.value)} placeholder="Enter one placeholder per line" disabled={disabled}/>
          <div className="mt-2">
            <button className="border rounded px-2 py-1 text-xs" onClick={bulkAdd} disabled={disabled}>Bulk Add</button>
          </div>
        </div>
      </div>
    </div>
  );
};

/* ---------- Generic print section (always show 2-boxes for checkboxes) ---------- */
const PrintSection = ({ title, cols = [], rows = [] }) => {
  const isTrue = (v) => v === true || v === 'true' || v === 1 || v === '1';
  const isFalse = (v) => v === false || v === 'false' || v === 0 || v === '0';

  const renderCheckboxPair = (val) => {
    // Left box = ✔ (true), Right box = ✖ (false)
    if (isTrue(val)) return '☑ ☐';
    if (isFalse(val)) return '☐ ☒';
    return '☐ ☐'; // unset
  };

  return (
    <>
      <div className="mb-2 font-medium">{title}</div>
      <table className="w-full border mb-4">
        <thead>
          <tr>
            {cols.map((c) => (
              <th key={c.key} className="border p-1 text-center">
                {c.label}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rows.map((r, i) => (
            <tr key={i}>
              {cols.map((c) => (
                <td key={`${i}-${c.key}`} className="border p-1 text-center align-middle">
                  {c.type === 'checkbox'
                    ? (
                      <div className="flex flex-col items-center">
                        <div>{renderCheckboxPair(r[c.key])}</div>
                        {r[`${c.key}__audit`] && (
                          <div className="text-[10px] text-gray-500 mt-0.5">
                            {(r[`${c.key}__audit`].value || '')} by {r[`${c.key}__audit`].by || '-'} on {fmtDT(r[`${c.key}__audit`].at)}
                          </div>
                        )}
                      </div>
                    )
                    : (r[c.key] ?? '')}
                </td>
              ))}
            </tr>
          ))}
          {rows.length === 0 && (
            <tr>
              <td className="border p-1 text-gray-500 text-center" colSpan={cols.length}>
                No records
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </>
  );
};

/* ---------- Preview body (shared with print) ---------- */
const ChecklistPreview = ({ form, headerMeta, showHdr }) => (
  <div className="print-a4 p-6 text-sm leading-6 bg-white text-black">
    <PrintStyles/>
    {/* Header with Logo/Org */}
    <div className="print-header mb-3 flex items-center gap-3">
      {headerMeta.logo_url ? (
        <img src={headerMeta.logo_url} alt="logo" style={{height:40}}/>
      ) : (
        <div className="font-bold text-lg">{headerMeta.org_name || 'Your Organization'}</div>
      )}
      <div className="ml-auto text-xs text-gray-600">
        Printed: {fmtDT(new Date().toISOString())}
      </div>
    </div>
        <div className="mb-3">
  <img
    src={form?.header_meta?.logo_url || logo}
    alt="Logo"
    className="h-16 w-auto object-contain print:h-16"
    crossOrigin="anonymous"
  />
</div>
    <h2 className="text-xl font-bold mb-2 text-center">
      {form.checklist_title || headerMeta.checklist_name || 'PHARMACEUTICAL MATERIAL INSPECTION CHECKLIST'}
    </h2>

    <div className="grid grid-cols-2 gap-2 mb-4">
      <div>SOP Reference: {showHdr(form.sop_reference,'sop_reference')}</div>
      <div>Version: {showHdr(form.version,'version')}</div>
      <div>Effective Date: {showHdr(form.effective_date,'effective_date')}</div>
      <div>Prepared By: {showHdr(form.prepared_by,'prepared_by')}</div>
      <div>Reviewed By: {showHdr(form.reviewed_by,'reviewed_by')}</div>
      <div>Approved By: {showHdr(form.approved_by,'approved_by')}</div>
    </div>

    <div className="border-t pt-2 mb-2 font-semibold">1. Header Details</div>
    <div className="grid grid-cols-2 gap-2 mb-4">
      {headerMeta.show_material_name!==false && (<div>Material Name: {showHdr(form.material_name,'material_name')}</div>)}
      {headerMeta.show_batch_no!==false && (<div>Batch/Lot No.: {showHdr(form.batch_no,'batch_no')}</div>)}
      {headerMeta.show_supplier!==false && (<div>Supplier/Vendor: {showHdr(form.supplier,'supplier')}</div>)}
      {headerMeta.show_date_of_receipt!==false && (<div>Date of Receipt: {showHdr(form.date_of_receipt,'date_of_receipt')}</div>)}
      {headerMeta.show_quantity_received!==false && (<div>Quantity Received: {showHdr(form.quantity_received,'quantity_received')}</div>)}
      {headerMeta.show_storage_condition!==false && (<div>Storage Condition: {showHdr(form.storage_condition,'storage_condition')}</div>)}
      {headerMeta.show_inspection_date!==false && (<div>Inspection Date: {showHdr(form.inspection_date,'inspection_date')}</div>)}
      {headerMeta.show_inspected_by!==false && (<div>Inspected By: {showHdr(form.inspected_by,'inspected_by')}</div>)}
      <div>Workflow: {form.workflow_status||'Draft'}</div>
      <div>Linked Module: {form.linked_module||'-'}</div>
      <div>Linked Submodule: {form.linked_submodule||'-'}</div>
      {headerMeta.show_linked_entity_id!==false && (<div>Linked Entity: {form.linked_entity_id||'-'}</div>)}
    </div>

    <div className="border-t pt-2 mb-2 font-semibold">2. Inspection Checklist (Body)</div>
    {headerMeta.show_visual!==false && (
      <div className="no-break-inside">
        <PrintSection
          title={form.visual_title||'A. Visual Inspection'}
          cols={form.visual_cols||[]}
          rows={form.visual_inspection||[]}
        />
      </div>
    )}
    {headerMeta.show_doc!==false && (
      <div className="no-break-inside">
        <PrintSection
          title={form.doc_title||'B. Documentation Review'}
          cols={form.doc_cols||[]}
          rows={form.documentation_review||[]}
        />
      </div>
    )}
    {headerMeta.show_test!==false && (
      <div className="no-break-inside">
        <PrintSection
          title={form.test_title||'C. Physical/Chemical Tests'}
          cols={form.test_cols||[]}
          rows={form.physical_tests||[]}
        />
      </div>
    )}

    <div className="page-break-before border-t pt-2 mb-2 font-semibold">3. Footer (Conclusion & Signatures)</div>
    <div className="grid grid-cols-2 gap-2 mb-3">
      <div className="flex items-center gap-2">
        <span className="font-medium">Overall Inspection Status:</span>
        <OverallStatusBoxes value={form.overall_status}/>
      </div>
      <div>Remarks: {form.remarks||'-'}</div>
    </div>

    {/* Signature blocks */}
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
      <div className="border rounded p-2">
        <div className="font-medium">Prepared By</div>
        <div>Name: {showHdr(form.prepared_by,'prepared_by')}</div>
        <div>Date/Time: {fmtDT(headerMeta.prepared_signed_at)}</div>
      </div>
      <div className="border rounded p-2">
        <div className="font-medium">Reviewed By (QA)</div>
        <div>Name: {showHdr(form.reviewed_by,'reviewed_by')}</div>
        <div>Date/Time: {fmtDT(headerMeta.reviewed_signed_at)}</div>
      </div>
      <div className="border rounded p-2">
        <div className="font-medium">Approved By</div>
        <div>Name: {showHdr(form.approved_by,'approved_by')}</div>
        <div>Date/Time: {fmtDT(form.approved_at || headerMeta.approved_signed_at)}</div>
      </div>
    </div>

    <div className="border-t pt-2 mb-2 font-semibold">Notes</div>
    <div className="whitespace-pre-wrap mb-2">{form.notes||'-'}</div>

    <div className="print-footer mt-4 text-center text-xs text-gray-500">
      {headerMeta.print_footer_text || 'Generated by DigitizerX'} • {fmtDT(new Date().toISOString())}
    </div>
  </div>
);

/* ---------- Template Library ---------- */
const TemplateLibrary=({form,setForm,canAdmin,readOnly})=>{
  const [templates,setTemplates]=useState([]);
  const [loading,setLoading]=useState(false);
  const [selected,setSelected]=useState('');
  const [saveScope,setSaveScope]=useState('auto'); // 'auto'|'global'|'module'|'submodule'
  const moduleId=form.linked_module||null;
  const submoduleId=form.linked_submodule||null;

  const loadTemplates=async({all=false}={})=>{
    setLoading(true);
    let data,error;
    try{
      if(!all){
        const res=await supabase.rpc('get_templates_for_scope',{p_module_id:moduleId,p_submodule_id:submoduleId});
        data=res.data; error=res.error;
      }else{
        const res=await supabase.from('checklist_template')
          .select('id,name,module_id,submodule_id,header_meta,visual_placeholders,doc_placeholders,test_placeholders,visual_cols,doc_cols,test_cols,visual_title,doc_title,test_title,status,locked,version')
          .order('name',{ascending:true});
        data=res.data; error=res.error;
      }
    }catch(err){
      error = {message: err?.message || 'Template load failed'};
    }
    if(error){toast.error(error.message); setTemplates([]);} else {setTemplates(data||[]);}
    setLoading(false);
  };

  useEffect(()=>{loadTemplates({all:false});},[moduleId,submoduleId]);

  const tpl=(templates.find((t)=>String(t.id)===String(selected)))||null;
  const firstRequiredKey=(cols)=>cols?.find?.((c)=>c.required)?.key||(cols?.[0]?.key||null);

  const applyPlaceholders=(section,mode)=>{
    if(!tpl){toast.error('Pick a template'); return;}
    const list=section==='visual'?tpl.visual_placeholders:section==='doc'?tpl.doc_placeholders:tpl.test_placeholders;
    if(!Array.isArray(list)||list.length===0){toast.error('Template has no placeholders in this section'); return;}

    const cols=form[section+'_cols']||[];
    const key=firstRequiredKey(cols);
    if(!key){toast.error('Add a column or mark one as required first.'); return;}

    // checkbox cells start as undefined (neither ✔ nor ✖)
    const makeBlankRow=()=>{const o={}; cols.forEach((c)=>{o[c.key]=(c.type==='checkbox')?undefined:'';}); return o;};
    const buildRows=(arr)=>arr.map((p)=>{const r=makeBlankRow(); r[key]=p; return r;});

    const targetKey=section==='visual'?'visual_inspection':(section==='doc'?'documentation_review':'physical_tests');
    const base=mode==='append'?(form[targetKey]||[]):[];
    setForm((f)=>({...f,[targetKey]:[...base,...buildRows(list)]}));
    toast.success(`${mode==='append'?'Appended':'Replaced'} ${list.length} row(s) from template`);
  };

  const applyColsTitles=(section)=>{
    if(!tpl){toast.error('Pick a template'); return;}
    if(!canAdmin){toast.error('Only Admin can replace columns/titles'); return;}
    if(!window.confirm('Replace columns & title (and header placeholders if present) with the template values?')) return;

    const header_meta = tpl.header_meta || {};

    if(section==='visual'){
      setForm((f)=>({...f,visual_cols:tpl.visual_cols||[],visual_title:tpl.visual_title||f.visual_title, header_meta:{...DEFAULT_HEADER_META(), ...(f.header_meta||{}), ...header_meta}}));
    }else if(section==='doc'){
      setForm((f)=>({...f,doc_cols:tpl.doc_cols||[],doc_title:tpl.doc_title||f.doc_title, header_meta:{...DEFAULT_HEADER_META(), ...(f.header_meta||{}), ...header_meta}}));
    }else{
      setForm((f)=>({...f,test_cols:tpl.test_cols||[],test_title:tpl.test_title||f.test_title, header_meta:{...DEFAULT_HEADER_META(), ...(f.header_meta||{}), ...header_meta}}));
    }
    toast.success('Applied columns/title (+header placeholders if any) from template');
  };

  const computeScopeForSave=()=>{
    let scope=saveScope;
    if(scope==='auto'){scope=submoduleId?'submodule':(moduleId?'module':'global');}
    return {module_id:(scope==='module'||scope==='submodule')?moduleId:null,submodule_id:(scope==='submodule')?submoduleId:null,scope};
  };

  const saveAsNew=async()=>{
    if(!canAdmin){toast.error('Only Admin can save templates'); return;}
    const name=window.prompt('Template name?','My Checklist Template'); if(!name) return;

    const {module_id,submodule_id,scope}=computeScopeForSave();
    if(scope!=='global'&&!module_id){toast.error('Pick a Linked Module/Submodule first or set scope to Global.'); return;}

    const payload={
      name,
      header_meta: form.header_meta || DEFAULT_HEADER_META(),
      visual_placeholders:form.visual_placeholders||[],
      doc_placeholders:form.doc_placeholders||[],
      test_placeholders:form.test_placeholders||[],
      visual_cols:form.visual_cols||[],
      doc_cols:form.doc_cols||[],
      test_cols:form.test_cols||[],
      visual_title:form.visual_title||'',
      doc_title:form.doc_title||'',
      test_title:form.test_title||'',
      module_id,
      submodule_id,
      // optional fields (DB may or may not have)
      status:'Draft',
      locked:false,
      version:1
    };
    const {error}=await supabase.from('checklist_template').insert([payload]);
    if(error){toast.error(error.message); return;}
    toast.success(`Template saved (${scope})`);
    await loadTemplates({all:false});
  };

  const updateSelected=async()=>{
    if(!canAdmin){toast.error('Only Admin can update templates'); return;}
    if(!tpl){toast.error('Pick a template'); return;}
    if(!window.confirm(`Update "${tpl.name}" with current screen values?`)) return;

    const payload={
      header_meta: form.header_meta || DEFAULT_HEADER_META(),
      visual_placeholders:form.visual_placeholders||[],
      doc_placeholders:form.doc_placeholders||[],
      test_placeholders:form.test_placeholders||[],
      visual_cols:form.visual_cols||[],
      doc_cols:form.doc_cols||[],
      test_cols:form.test_cols||[],
      visual_title:form.visual_title||'',
      doc_title:form.doc_title||'',
      test_title:form.test_title||''
    };
    const {error}=await supabase.from('checklist_template').update(payload).eq('id',tpl.id);
    if(error){toast.error(error.message); return;}
    toast.success('Template updated');
    await loadTemplates({all:false});
  };

  const markApprovedAndLock = async()=>{
    if(!tpl){toast.error('Pick a template'); return;}
    if(!canAdmin){toast.error('Only Admin can approve/lock'); return;}
    try{
      const {error} = await supabase.from('checklist_template')
        .update({ status:'Approved', locked:true, version:(tpl.version||1) })
        .eq('id', tpl.id);
      if(error) throw error;
      toast.success('Template marked Approved & Locked');
      await loadTemplates({all:false});
    }catch(err){
      // Graceful fallback if columns not present
      toast.error('Your template table has no status/locked/version columns. Rename template to include "[Approved]" to prefer it automatically.');
    }
  };

  return (
    <div className="mt-6 border rounded-md p-3">
      <div className="flex items-center gap-2">
        <Database size={16}/>
        <div className="font-semibold">Template Library</div>
        <div className="ml-2 text-xs text-gray-500">{loading?'loading…':`${templates.length} template(s)`}</div>
        <div className="ml-auto flex items-center gap-2">
          <label className="text-xs flex items-center gap-1">
            <span>Save Scope:</span>
            <select className="border rounded px-2 py-1 text-xs" value={saveScope} onChange={(e)=>setSaveScope(e.target.value)} disabled={readOnly||!canAdmin}>
              <option value="auto">Auto (submodule→module→global)</option>
              <option value="global">Global</option>
              <option value="module">Current Module</option>
              <option value="submodule">Current Submodule</option>
            </select>
          </label>
          <button className="border rounded px-2 py-1 text-xs" onClick={()=>loadTemplates({all:false})}>Refresh Scoped</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={()=>loadTemplates({all:true})}>Show All</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={saveAsNew} disabled={readOnly||!canAdmin}><Upload size={14}/> Save as New</button>
          <button className="border rounded px-2 py-1 text-xs" onClick={updateSelected} disabled={readOnly||!canAdmin||!selected}>Update Selected</button>
          <button className="border rounded px-2 py-1 text-xs inline-flex items-center gap-1" onClick={markApprovedAndLock} disabled={!canAdmin || !selected}>
            <Lock size={14}/> Approve & Lock
          </button>
        </div>
      </div>

      <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-3">
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Pick a Template</span>
          <select className="border rounded px-3 py-2" value={selected} onChange={(e)=>setSelected(e.target.value)}>
            <option value="">— Select —</option>
            {templates.map((t)=>{
              const scopeTag=t.submodule_id?'submodule':(t.module_id?'module':'global');
              const approved = (t.status==='Approved') || t.locked || (t.name||'').toLowerCase().includes('approved');
              const ver = t.version ? ` v${t.version}` : '';
              return <option key={t.id} value={t.id}>{t.name}{ver} ({scopeTag}{approved?', Approved':''})</option>;
            })}
          </select>
        </label>

        <div className="flex flex-col gap-2">
          <div className="text-sm font-medium">Apply to Visual</div>
          <div className="flex gap-2 flex-wrap">
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyPlaceholders('visual','append')} disabled={!selected||readOnly}>Append Placeholders → Rows</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyPlaceholders('visual','replace')} disabled={!selected||readOnly}>Replace Rows from Placeholders</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyColsTitles('visual')} disabled={!selected||readOnly||!canAdmin}>Replace Columns+Title (+Header)</button>
          </div>
        </div>

        <div className="flex flex-col gap-2">
          <div className="text-sm font-medium">Apply to Docs</div>
          <div className="flex gap-2 flex-wrap">
            <button
              className="border rounded px-2 py-1 text-xs"
              onClick={() => applyPlaceholders('doc','append')}
              disabled={!selected || readOnly}
            >
              Append Placeholders → Rows
            </button>
            <button
              className="border rounded px-2 py-1 text-xs"
              onClick={() => applyPlaceholders('doc','replace')}
              disabled={!selected || readOnly}
            >
              Replace Rows from Placeholders
            </button>
            <button
              className="border rounded px-2 py-1 text-xs"
              onClick={() => applyColsTitles('doc')}
              disabled={!selected || readOnly || !canAdmin}
            >
              Replace Columns+Title (+Header)
            </button>
          </div>
        </div>

        <div className="md:col-span-3 flex flex-col gap-2">
          <div className="text-sm font-medium">Apply to Tests</div>
          <div className="flex gap-2 flex-wrap">
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyPlaceholders('test','append')} disabled={!selected||readOnly}>Append Placeholders → Rows</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyPlaceholders('test','replace')} disabled={!selected||readOnly}>Replace Rows from Placeholders</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>applyColsTitles('test')} disabled={!selected||readOnly||!canAdmin}>Replace Columns+Title (+Header)</button>
          </div>
        </div>
      </div>
    </div>
  );
};

/* ---------- Main component ---------- */
const CheckListMaster=()=>{
  const {session,role}=useAuth()||{};
  const email=session?.user?.email||'';
  const uid=session?.user?.id||null;
  const canAdmin=isAdminLike(role);

  const [rows,setRows]=useState([]);
  const [loading,setLoading]=useState(true);
  const [saving,setSaving]=useState(false);
  const [editingId,setEditingId]=useState(null);

  // linkage lists
  const [modules,setModules]=useState([]);
  const [submodules,setSubmodules]=useState([]);

  // display helpers for IDs → names
  const moduleName = (id) => modules.find(m => String(m.module_id) === String(id))?.module_name || '-';
  const submoduleName = (id) => submodules.find(s => String(s.submodule_id) === String(id))?.submodule_name || '-';

  // auto-apply
  const [autoApplyOnLink,setAutoApplyOnLink]=useState(true);
  const lastAppliedScope=useRef({module:null,submodule:null});

  // toggle for editing header placeholders
  const [showHeaderHints,setShowHeaderHints]=useState(false);

  // filters & search
  const [ownerFilter,setOwnerFilter]=useState('all');
  const [workflowFilter,setWorkflowFilter]=useState('all');
  const [q,setQ]=useState('');
  const [searching,setSearching]=useState(false);
  const [searchResults,setSearchResults]=useState([]);

  // readiness / issues
  const [issues,setIssues]=useState([]);

  // tiny status/debug bar
  const [status,setStatus]=useState({lastOp:'',lastError:'',lastSaveId:null,lastFetchCount:null});
  const bumpStatus=(patch)=>setStatus((s)=>({...s,...patch}));

  const [form,setForm]=useState({
    id:null,
    // title
    checklist_title:'',
    sop_reference:'',
    version:'',
    effective_date:'',
    prepared_by:'',
    reviewed_by:'',
    approved_by:'',
    material_name:'',
    batch_no:'',
    supplier:'',
    date_of_receipt:'',
    quantity_received:'',
    storage_condition:'',
    inspection_date:'',
    inspected_by:'',
    /* header placeholders (+flags) */
    header_meta: DEFAULT_HEADER_META(),
    /* print option (persisted) */
    print_with_placeholders: true,
    /* titles */
    visual_title:'A. Visual Inspection',
    doc_title:'B. Documentation Review',
    test_title:'C. Physical/Chemical Tests (If Applicable)',
    /* dynamic body */
    visual_cols:DEFAULT_VISUAL_COLS(),
    doc_cols:DEFAULT_DOC_COLS(),
    test_cols:DEFAULT_TEST_COLS(),
    visual_inspection:DEFAULT_VISUAL_ROWS(),
    documentation_review:DEFAULT_DOC_ROWS(),
    physical_tests:DEFAULT_TEST_ROWS(),
    /* placeholders lists */
    visual_placeholders:[],
    doc_placeholders:[],
    test_placeholders:[],
    /* footer + notes */
    overall_status:'',
    remarks:'',
    notes:'',
    /* linkage */
    linked_module:'',
    linked_submodule:'',
    linked_entity_id:'',
    /* workflow */
    workflow_status:'Draft',
    submitted_by:null,
    submitted_at:null,
    approved_by_user:null,
    approved_at:null,
    created_by:email,
    created_uid:uid
  });

  /* ---------- Print & Preview ---------- */
  const [previewOpen, setPreviewOpen] = useState(false);
  const printRef=useRef(null);
  const handlePrint=useReactToPrint({
    content:()=>printRef.current,
    documentTitle:(form.checklist_title||'Inspection_Checklist').replace(/\s+/g,'_')
  });

  /* ---------- Fetch ---------- */
  const fetchAll=useCallback(async()=>{
    setLoading(true);
    try{
      let query = supabase.from('checklist_master').select('*').order('created_at',{ascending:false});

      if(ownerFilter==='mine') query = query.eq('created_by', email);

      if(workflowFilter==='Draft'){
        query = query.eq('workflow_status','Draft');
      }else if(workflowFilter==='Approved'){
        query = query.eq('workflow_status','Approved');
      }else if(workflowFilter==='Rejected'){
        query = query.eq('workflow_status','Rejected');
      }else if(workflowFilter==='Submitted'){
        query = query.neq('workflow_status','Draft').neq('workflow_status','Approved').neq('workflow_status','Rejected');
      }

      const {data,error}=await query;
      if(error){
        bumpStatus({lastOp:'fetch-error', lastError:error.message});
        toast.error(error.message);
        setRows([]);
      } else {
        bumpStatus({lastOp:'fetch-ok', lastError:'', lastFetchCount:(data||[]).length});
        setRows(data||[]);
      }
    }catch(err){
      bumpStatus({lastOp:'fetch-exception', lastError:err?.message||'Failed to load'});
      toast.error(err?.message||'Failed to load records');
      setRows([]);
    }
    setLoading(false);
  },[email,ownerFilter,workflowFilter]);

  const fetchLookups=async()=>{
    const [m,sm]=await Promise.all([
      supabase.from('module_master').select('module_id,module_name').order('module_name',{ascending:true}),
      supabase.from('sub_module_master').select('submodule_id,submodule_name,module_id').order('submodule_name',{ascending:true})
    ]);
    if(m.error){toast.error(m.error.message);} else {setModules(m.data||[]);}
    if(sm.error){toast.error(sm.error.message);} else {setSubmodules(sm.data||[]);}
  };
  useEffect(()=>{fetchLookups();},[]);
  useEffect(()=>{fetchAll();},[fetchAll]);

  // keep submodule consistent with module
  useEffect(()=>{
    if(!form.linked_module){return;}
    const ok=submodules.some((s)=>s.submodule_id===form.linked_submodule&&s.module_id===form.linked_module);
    if(!ok&&form.linked_submodule){
      setForm((f)=>({...f,linked_submodule:''}));
    }
  },[form.linked_module,submodules]);

  /* ---------- Auto-apply template on link ---------- */
  const hasBodyContent=()=>{
    const nonDefaultCols=(cols,defGen)=>{
      const def=defGen();
      if((cols?.length||0)!==def.length) return true;
      for(let i=0;i<(cols?.length||0);i++){
        const a=cols[i], b=def[i];
        if(a.key!==b.key||a.label!==b.label||a.type!==b.type) return true;
      }
      return false;
    };
    const anyRows=(form.visual_inspection?.length||0)+(form.documentation_review?.length||0)+(form.physical_tests?.length||0)>0;
    return anyRows
      || nonDefaultCols(form.visual_cols||[],DEFAULT_VISUAL_COLS)
      || nonDefaultCols(form.doc_cols||[],DEFAULT_DOC_COLS)
      || nonDefaultCols(form.test_cols||[],DEFAULT_TEST_COLS);
  };

  const applyFullTemplate=(tpl)=>{
    const firstKey=(cols)=>cols?.find?.((c)=>c.required)?.key||(cols?.[0]?.key||null);
    const buildRows=(ph,cols)=>{
      const key=firstKey(cols||[]);
      if(!key||!Array.isArray(ph)) return [];
      return ph.map((p)=>{
        const row={};
        (cols||[]).forEach((c)=>{row[c.key]=(c.type==='checkbox')?undefined:'';});
        row[key]=p;
        return row;
      });
    };

    const next={
      header_meta: {...DEFAULT_HEADER_META(), ...(tpl.header_meta||{})},
      visual_title: tpl.visual_title || form.visual_title,
      doc_title: tpl.doc_title || form.doc_title,
      test_title: tpl.test_title || form.test_title,
      visual_cols: tpl.visual_cols || form.visual_cols,
      doc_cols: tpl.doc_cols || form.doc_cols,
      test_cols: tpl.test_cols || form.test_cols,
      visual_placeholders: tpl.visual_placeholders || [],
      doc_placeholders: tpl.doc_placeholders || [],
      test_placeholders: tpl.test_placeholders || []
    };
    next.visual_inspection = buildRows(next.visual_placeholders,next.visual_cols);
    next.documentation_review = buildRows(next.doc_placeholders,next.doc_cols);
    next.physical_tests = buildRows(next.test_placeholders,next.test_cols);

    const titleCandidate = next.header_meta?.checklist_name_value || '';
    setForm((f)=>({...f,...next, checklist_title: titleCandidate || f.checklist_title}));
  };

  const tryAutoApplyTemplate=async()=>{
    const mod=form.linked_module||null;
    const sub=form.linked_submodule||null;
    if(!mod && !sub) return;
    if(lastAppliedScope.current.module===mod && lastAppliedScope.current.submodule===sub) return;

    const {data,error}=await supabase.rpc('get_templates_for_scope',{p_module_id:mod,p_submodule_id:sub});
    if(error){toast.error(error.message); return;}
    const list=data||[];
    if(list.length===0){lastAppliedScope.current={module:mod,submodule:sub}; return;}

    // Prefer Approved/Locked/name-tagged templates
    const best = list.find(t=> t.status==='Approved' || t.locked === true || (t.name||'').toLowerCase().includes('approved')) || list[0];
    const needConfirm=hasBodyContent();
    if(needConfirm){
      const ok=window.confirm(`Apply default template "${best.name}" for this link and replace current sections?`);
      if(!ok){ lastAppliedScope.current={module:mod,submodule:sub}; return; }
    }
    applyFullTemplate(best);
    toast.success(`Template auto-applied (${best.name||'default'})`);
    lastAppliedScope.current={module:mod,submodule:sub};
  };

  useEffect(()=>{if(autoApplyOnLink){tryAutoApplyTemplate();} /* eslint-disable-next-line */},[form.linked_module,form.linked_submodule,autoApplyOnLink]);

  /* ---------- Reset & New ---------- */
  const resetBodyToDefaults=()=>{
    setForm((f)=>({
      ...f,
      visual_title:'A. Visual Inspection',
      doc_title:'B. Documentation Review',
      test_title:'C. Physical/Chemical Tests (If Applicable)',
      visual_cols:DEFAULT_VISUAL_COLS(),
      doc_cols:DEFAULT_DOC_COLS(),
      test_cols:DEFAULT_TEST_COLS(),
      visual_inspection:DEFAULT_VISUAL_ROWS(),
      documentation_review:DEFAULT_DOC_ROWS(),
      physical_tests:DEFAULT_TEST_ROWS(),
      visual_placeholders:[],
      doc_placeholders:[],
      test_placeholders:[],
      notes:''
    }));
  };
  const newChecklist=()=>{
    setEditingId(null);
    setForm({
      id:null,
      checklist_title:'',
      sop_reference:'',
      version:'',
      effective_date:'',
      prepared_by:'',
      reviewed_by:'',
      approved_by:'',
      material_name:'',
      batch_no:'',
      supplier:'',
      date_of_receipt:'',
      quantity_received:'',
      storage_condition:'',
      inspection_date:'',
      inspected_by:'',
      header_meta: DEFAULT_HEADER_META(),
      print_with_placeholders: true,
      visual_title:'A. Visual Inspection',
      doc_title:'B. Documentation Review',
      test_title:'C. Physical/Chemical Tests (If Applicable)',
      visual_cols:DEFAULT_VISUAL_COLS(),
      doc_cols:DEFAULT_DOC_COLS(),
      test_cols:DEFAULT_TEST_COLS(),
      visual_inspection:DEFAULT_VISUAL_ROWS(),
      documentation_review:DEFAULT_DOC_ROWS(),
      physical_tests:DEFAULT_TEST_ROWS(),
      visual_placeholders:[],
      doc_placeholders:[],
      test_placeholders:[],
      overall_status:'',
      remarks:'',
      notes:'',
      linked_module:'',
      linked_submodule:'',
      linked_entity_id:'',
      workflow_status:'Draft',
      submitted_by:null,
      submitted_at:null,
      approved_by_user:null,
      approved_at:null,
      created_by:email,
      created_uid:uid
    });
    bumpStatus({lastOp:'new', lastError:''});
  };

  /* ---------- Edit/Delete ---------- */
  const handleEdit=(row)=>{
    const hm = {...DEFAULT_HEADER_META(), ...(row.header_meta||{})};
    setEditingId(row.id);
    setForm({
      ...row,
      checklist_title: row.checklist_title || hm.checklist_name_value || '',
      header_meta: hm,
      print_with_placeholders: row.print_with_placeholders ?? true
    });
    bumpStatus({lastOp:'edit-loaded', lastError:'', lastSaveId:row.id});
    toast.success('Loaded checklist for editing');
  };
  const handleDelete=async(id)=>{
    if(!canAdmin){toast.error('Only Admin/Super Admin can delete.'); return;}
    if(!window.confirm('Delete this checklist?')) return;
    const {error}=await supabase.from('checklist_master').delete().eq('id',id);
    if(error){toast.error(error.message); bumpStatus({lastOp:'delete-error', lastError:error.message});}
    else {toast.success('Deleted'); bumpStatus({lastOp:'delete-ok', lastError:'', lastSaveId:id}); fetchAll(); if(editingId===id){newChecklist();}}
  };

  /* ---------- Required cells validator ---------- */
  const validateRequiredCells=()=>{
    const reqErr=(cols,rows)=>cols.filter((c)=>c.required).some((c)=>rows.some((r)=>!String(r?.[c.key]??'').trim()));
    if(reqErr(form.visual_cols||[],form.visual_inspection||[])) return 'Visual Inspection has required cells empty';
    if(reqErr(form.doc_cols||[],form.documentation_review||[])) return 'Documentation Review has required cells empty';
    if(reqErr(form.test_cols||[],form.physical_tests||[])) return 'Physical/Chemical Tests has required cells empty';
    return null;
  };

  /* ---------- Save ---------- */
  const handleSave = async () => {
    setSaving(true);

    const cellErr = validateRequiredCells();
    if (cellErr) {
      toast.error(cellErr);
      setSaving(false);
      return null;
    }

    const totalRows =
      (form.visual_inspection?.length || 0) +
      (form.documentation_review?.length || 0) +
      (form.physical_tests?.length || 0);

    if (totalRows === 0) {
      const ok = window.confirm('You are saving with NO checklist rows in any section. Continue?');
      if (!ok) { setSaving(false); return null; }
    }

    // Mirror the checklist title into header_meta for back-compat
    const nextHeaderMeta = {
      ...DEFAULT_HEADER_META(),
      ...(form.header_meta || {}),
      checklist_name_value: form.checklist_title || (form.header_meta?.checklist_name_value || '')
    };

    const { print_with_placeholders: _uiOnly, ...dbFields } = form;
    const payloadBase = nullifyTypedEmpties({
      ...dbFields,
      header_meta: nextHeaderMeta,
      created_by: form.created_by || email,
      created_uid: form.created_uid || uid,
    });

    let res;
    try {
      if (editingId) {
        const { id: _drop, ...payloadUpdate } = payloadBase;
        const ownerCanEdit = (form.created_by === email && form.workflow_status === 'Draft');
        if (!canAdmin && !ownerCanEdit) {
          toast.error('You can only edit your own Draft.');
          setSaving(false);
          return null;
        }
        res = await supabase
          .from('checklist_master')
          .update(payloadUpdate)
          .eq('id', editingId)
          .select()
          .single();
      } else {
        const { id: _drop, ...payloadInsert } = payloadBase;
        res = await supabase
          .from('checklist_master')
          .insert([payloadInsert])
          .select()
          .single();
      }
    } catch (err) {
      toast.error(err?.message || 'Save failed');
      setSaving(false);
      return null;
    }

    if (res.error) {
      toast.error(res.error.message);
      setSaving(false);
      return null;
    }

    toast.success('Saved');
    const newId = res.data?.id || editingId;

    const hmOut = { ...DEFAULT_HEADER_META(), ...(res.data?.header_meta || {}) };
    setEditingId(newId);
    setForm({
      ...res.data,
      checklist_title: res.data?.checklist_title || hmOut.checklist_name_value || '',
      header_meta: hmOut,
      print_with_placeholders: res.data?.print_with_placeholders ?? true
    });

    await fetchAll();
    setSaving(false);
    return newId;
  };

  /* ---------- RPC wiring (with fallbacks) ---------- */
  const approveViaRPC=async(id,status,reason='')=>{
    const {data,error}=await supabase.rpc('approve_checklist',{p_id:id,p_status:status,p_reason:reason});
    if(error){
      const upd=await supabase.from('checklist_master').update({
        workflow_status: status,
        approved_by_user: email,
        approved_at: new Date().toISOString(),
        remarks: reason ? `${form.remarks||''}\n[Decision]: ${status} (${reason})` : form.remarks
      }).eq('id',id).select().single();
      if(upd.error){
        toast.error(upd.error.message);
        bumpStatus({lastOp:'approve-fallback-error', lastError:upd.error.message});
        return;
      }
      toast.success(`Marked ${status} (fallback)`);
      const merged={...DEFAULT_HEADER_META(), ...(upd.data?.header_meta||{})};
      setForm({...upd.data, checklist_title: upd.data?.checklist_title || merged.checklist_name_value || '', header_meta:merged});
      setRows(prev=>prev.map(r=>r.id===id?upd.data:r));
      bumpStatus({lastOp:'approve-fallback-ok', lastError:''});
      return;
    }
    const hmOut = {...DEFAULT_HEADER_META(), ...(data?.header_meta||{})};
    toast.success(`Marked ${status}`);
    setForm({...data, checklist_title: data?.checklist_title || hmOut.checklist_name_value || '', header_meta:hmOut});
    setRows(prev=>prev.map(r=>r.id===id?data:r));
    bumpStatus({lastOp:'approve-ok', lastError:''});
    setEditingId(id);
  };

  const submitViaRPC=async(id)=>{
    const {data,error}=await supabase.rpc('submit_checklist',{p_id:id});
    if(error){
      const upd=await supabase.from('checklist_master').update({
        workflow_status:'Submitted',
        submitted_by: email,
        submitted_at: new Date().toISOString()
      }).eq('id',id).select().single();
      if(upd.error){
        toast.error(upd.error.message);
        bumpStatus({lastOp:'submit-fallback-error', lastError:upd.error.message});
        return;
      }
      toast.success('Submitted for Review (fallback)');
      const merged={...DEFAULT_HEADER_META(), ...(upd.data?.header_meta||{})};
      setForm({...upd.data, checklist_title: upd.data?.checklist_title || merged.checklist_name_value || '', header_meta:merged});
      setRows(prev=>prev.map(r=>r.id===id?upd.data:r));
      bumpStatus({lastOp:'submit-fallback-ok', lastError:''});
      setEditingId(id);
      return;
    }
    const hmOut = {...DEFAULT_HEADER_META(), ...(data?.header_meta||{})};
    toast.success('Submitted for Review');
    setForm({...data, checklist_title: data?.checklist_title || hmOut.checklist_name_value || '', header_meta:hmOut});
    setRows(prev=>prev.map(r=>r.id===id?data:r));
    bumpStatus({lastOp:'submit-ok', lastError:''});
    setEditingId(id);
  };

  const handleSubmitButton = async () => {
    let id = editingId;
    if(!id){
      id = await handleSave();
      if(!id) return;
    }
    const totalRows = (form.visual_inspection?.length||0) + (form.documentation_review?.length||0) + (form.physical_tests?.length||0);
    if(totalRows===0){
      const ok = window.confirm('Submitting with NO checklist rows. Continue?');
      if(!ok) return;
    }
    await submitViaRPC(id);
  };

  /* ---------- Column/row setters for grid ---------- */
  const setVisualCols=(next)=>setForm((f)=>({...f,visual_cols:typeof next==='function'?next(f.visual_cols):next}));
  const setDocCols=(next)=>setForm((f)=>({...f,doc_cols:typeof next==='function'?next(f.doc_cols):next}));
  const setTestCols=(next)=>setForm((f)=>({...f,test_cols:typeof next==='function'?next(f.test_cols):next}));
  const setVisualRows=(next)=>setForm((f)=>({...f,visual_inspection:typeof next==='function'?next(f.visual_inspection):next}));
  const setDocRows=(next)=>setForm((f)=>({...f,documentation_review:typeof next==='function'?next(f.documentation_review):next}));
  const setTestRows=(next)=>setForm((f)=>({...f,physical_tests:typeof next==='function'?next(f.physical_tests):next}));

  /* ---------- Local placeholders → rows ---------- */
  const firstRequiredKey=(cols)=>cols?.find?.((c)=>c.required)?.key||(cols?.[0]?.key||null);
  const applyLocalPlaceholders=(section,mode)=>{
    const list=section==='visual'?form.visual_placeholders:section==='doc'?form.doc_placeholders:form.test_placeholders;
    const cols=form[section+'_cols']||[];
    const key=firstRequiredKey(cols);
    if(!key){toast.error('Add a column or mark one as required first.'); return;}
    if(!Array.isArray(list)||list.length===0){toast.error('No placeholders to apply'); return;}

    const makeBlankRow=()=>{const o={}; cols.forEach((c)=>{o[c.key]=(c.type==='checkbox')?undefined:'';}); return o;};
    const buildRows=(arr)=>arr.map((p)=>{const r=makeBlankRow(); r[key]=p; return r;});

    const targetKey=section==='visual'?'visual_inspection':(section==='doc'?'documentation_review':'physical_tests');
    const base=mode==='append'?(form[targetKey]||[]):[];
    setForm((f)=>({...f,[targetKey]:[...base,...buildRows(list)]}));
    toast.success(`${mode==='append'?'Appended':'Replaced'} ${list.length} row(s)`);
  };

  const resetHeaderPlaceholdersFromTemplate=async()=>{
    const mod=form.linked_module||null;
    const sub=form.linked_submodule||null;
    const {data,error}=await supabase.rpc('get_templates_for_scope',{p_module_id:mod,p_submodule_id:sub});
    if(error){toast.error(error.message); return;}
    const tpl=(data||[])[0];
    if(!tpl || !tpl.header_meta){toast.error('No scoped template or template has no header placeholders'); return;}
    const merged = {...DEFAULT_HEADER_META(), ...(tpl.header_meta||{})};
    merged.checklist_name_value = form.checklist_title || merged.checklist_name_value || '';
    setForm((f)=>({...f, header_meta: merged}));
    toast.success('Header placeholders reset from template');
  };

  const disableSavedEdit=(!canAdmin&&!!editingId&&((form.created_by!==email)||form.workflow_status!=='Draft'));
  const submodsForModule=useMemo(()=>submodules.filter((s)=>!form.linked_module||s.module_id===form.linked_module),[submodules,form.linked_module]);
  const headerMeta={...DEFAULT_HEADER_META(), ...(form.header_meta||{})};

  const showHdr=(val,key)=>(String(val||'').trim()?val:(form.print_with_placeholders?(headerMeta[key]||'-'):'-'));

  /* ---------- Predefined fields toggle block ---------- */
  const PREDEFINED = [
    {key:'material_name',label:'Material Name'},
    {key:'batch_no',label:'Batch/Lot No.'},
    {key:'supplier',label:'Supplier/Vendor'},
    {key:'date_of_receipt',label:'Date of Receipt'},
    {key:'quantity_received',label:'Quantity Received'},
    {key:'storage_condition',label:'Storage Condition'},
    {key:'inspection_date',label:'Inspection Date'},
    {key:'inspected_by',label:'Inspected By'},
    {key:'linked_entity_id',label:'Linked Entity ID'}
  ];

  const setPredef = (k,val)=>{
    setForm(f=>({...f, header_meta:{...(f.header_meta||{}), [`show_${k}`]:val}}));
  };
  const setAllPredef=(val)=>{
    setForm(f=>{
      const hm={...(f.header_meta||{})};
      PREDEFINED.forEach(p=>{ hm[`show_${p.key}`]=val; });
      return {...f, header_meta:hm};
    });
  };

  /* ---------- Quick Search ---------- */
  const performSearch = async ()=>{
    if(!q || q.trim().length<2){
      toast('Type at least 2 characters to search');
      setSearchResults([]);
      return;
    }
    setSearching(true);
    try{
      let qry = supabase.from('checklist_master')
        .select('id,checklist_title,version,linked_module,linked_submodule,status,workflow_status,prepared_by,reviewed_by,approved_by')
        .or(`checklist_title.ilike.%${q}%,version.ilike.%${q}%`)
        .order('created_at',{ascending:false})
        .limit(50);

      if(ownerFilter==='mine') qry = qry.eq('created_by', email);
      if(workflowFilter==='Draft'){
        qry = qry.eq('workflow_status','Draft');
      }else if(workflowFilter==='Approved'){
        qry = qry.eq('workflow_status','Approved');
      }else if(workflowFilter==='Rejected'){
        qry = qry.eq('workflow_status','Rejected');
      }else if(workflowFilter==='Submitted'){
        qry = qry.neq('workflow_status','Draft').neq('workflow_status','Approved').neq('workflow_status','Rejected');
      }

      const {data,error} = await qry;
      if(error){ toast.error(error.message); bumpStatus({lastOp:'search-error', lastError:error.message}); setSearchResults([]); }
      else { setSearchResults(data||[]); bumpStatus({lastOp:'search-ok', lastError:'', lastFetchCount:(data||[]).length}); }
    }catch(err){
      toast.error(err?.message||'Search failed');
      bumpStatus({lastOp:'search-exception', lastError:err?.message||'Search failed'});
      setSearchResults([]);
    }
    setSearching(false);
  };
  const clearSearch=()=>{ setQ(''); setSearchResults([]); };

  /* ---------- Live Readiness/Missing banner ---------- */
  useEffect(()=>{
    const out=[];
    const totalRows = (form.visual_inspection?.length||0) + (form.documentation_review?.length||0) + (form.physical_tests?.length||0);
    if(totalRows===0) out.push('No checklist rows have been added in Visual/Docs/Tests.');
    const reqCells = validateRequiredCells();
    if(reqCells) out.push(reqCells);
    if(!form.checklist_title) out.push('Checklist Name/Title is blank (optional but recommended).');
    if(!form.linked_module) out.push('Linked Module not selected (optional).');
    setIssues(out);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  },[form.visual_inspection, form.documentation_review, form.physical_tests, form.visual_cols, form.doc_cols, form.test_cols, form.checklist_title, form.linked_module]);

  /* ---------- Signature stamping helpers ---------- */
  const stampSignature = (who) => {
    const key = `${who}_signed_at`;
    setForm(f=>({
      ...f,
      [who+'_by']: f[who+'_by'] || undefined, // no-op if not present
      header_meta: {
        ...f.header_meta,
        [key]: new Date().toISOString()
      },
      ...(who==='approved' ? { approved_at: f.approved_at || new Date().toISOString() } : {})
    }));
    // If name empty, set it to current user email as a sensible default
    if (who==='prepared' && !form.prepared_by) setForm(f=>({...f, prepared_by: email}));
    if (who==='reviewed' && !form.reviewed_by) setForm(f=>({...f, reviewed_by: email}));
    if (who==='approved' && !form.approved_by) setForm(f=>({...f, approved_by: email}));
  };

  return (
    <div className="p-4">

      {/* Tiny status/debug bar */}
      <div className="mb-3 text-xs flex items-center gap-2 text-gray-700">
        <Info size={14}/>
        <span className="font-semibold">Status:</span>
        <span className="px-2 py-0.5 rounded bg-gray-100">{status.lastOp||'—'}</span>
        {status.lastSaveId&&<span>lastId: <b>{status.lastSaveId}</b></span>}
        {status.lastFetchCount!=null&&<span>rows: <b>{status.lastFetchCount}</b></span>}
        {status.lastError&&<span className="text-red-600">error: {status.lastError}</span>}
      </div>

      {/* Readiness & Missing Content banner */}
      {issues.length>0 && (
        <div className="mb-4 border-l-4 border-amber-500 bg-amber-50 p-3 text-sm">
          <div className="flex items-center gap-2 font-semibold"><AlertTriangle size={16}/> Readiness & Missing Content</div>
          <ul className="list-disc ml-6 mt-1">
            {issues.map((i,idx)=><li key={idx}>{i}</li>)}
          </ul>
          <div className="text-xs text-gray-600 mt-2">
            These are informational only — they won’t block Save/Submit. Required grid cells are the only hard checks.
          </div>
        </div>
      )}

      {/* Header bar */}
      <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
        <h1 className="text-2xl font-bold flex items-center gap-2"><ClipboardList/> Check List Master</h1>
        <div className="flex items-center gap-2">
          <button onClick={newChecklist} className="inline-flex items-center gap-2 px-3 py-2 rounded-md border"><Plus size={16}/> New</button>
          <button onClick={resetBodyToDefaults} className="inline-flex items-center gap-2 px-3 py-2 rounded-md border"><RotateCcw size={16}/> Reset Sections</button>
          <label className="text-xs flex items-center gap-1 border rounded px-2 py-1">
            <input type="checkbox" checked={autoApplyOnLink} onChange={(e)=>setAutoApplyOnLink(e.target.checked)}/>
            Auto-apply template on link
          </label>
          <label className="text-xs flex items-center gap-1 border rounded px-2 py-1">
            <input type="checkbox" checked={!!form.print_with_placeholders} onChange={(e)=>setForm(f=>({...f,print_with_placeholders:e.target.checked}))} disabled={disableSavedEdit}/>
            Print: use placeholders when empty
          </label>
          {canAdmin||(!editingId)||form.workflow_status==='Draft'?(
            <button onClick={handleSave} disabled={saving} className={cls('inline-flex items-center gap-2 px-4 py-2 rounded-md text-white',saving?'bg-gray-400':'bg-green-600 hover:bg-green-700')}>
              {saving?<Loader2 className="animate-spin" size={16}/>:<Save size={16}/>}
              {editingId?'Update':'Save'}
            </button>
          ):null}
          {(!canAdmin)&&(form.workflow_status==='Draft')&&(
            <button onClick={handleSubmitButton} disabled={saving} className="inline-flex items-center gap-2 px-4 py-2 rounded-md text-white bg-blue-600 hover:bg-blue-700">
              <Send size={16}/> Submit for Review
            </button>
          )}
          <button
            onClick={()=>setPreviewOpen(true)}
            className="inline-flex items-center gap-2 px-3 py-2 rounded-md border"
            title="Preview checklist"
          >
            <Eye size={16}/> Preview
          </button>
          <button onClick={handlePrint} className="inline-flex items-center gap-2 px-3 py-2 rounded-md border"><Printer size={16}/> Print PDF</button>
        </div>
      </div>

      {/* Checklist Name (title) */}
      <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
        <label className="flex flex-col gap-1 md:col-span-3">
          <span className="text-sm text-gray-600">Checklist Name / Title</span>
          <input
            className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
            value={form.checklist_title||''}
            onChange={(e)=>setForm({...form, checklist_title:e.target.value})}
            placeholder={headerMeta.checklist_name}
            disabled={disableSavedEdit}
          />
          <span className="text-xs text-gray-500">This appears at the very top of the printout.</span>
        </label>
      </div>

      {/* Predefined Fields (show/hide) */}
      <div className="mt-4 border rounded-md p-3">
        <div className="flex items-center">
          <div className="font-semibold">Predefined Fields (show/hide per checklist)</div>
          <div className="ml-auto flex items-center gap-2">
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>setAllPredef(true)} disabled={disableSavedEdit}>Select All</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>setAllPredef(false)} disabled={disableSavedEdit}>Select None</button>
          </div>
        </div>
        <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-y-3">
          {PREDEFINED.map(p=>{
            const checked = (headerMeta[`show_${p.key}`]!==false);
            return (
              <label key={p.key} className="text-sm flex items-center gap-2">
                <input type="checkbox" checked={checked} onChange={(e)=>setPredef(p.key,e.target.checked)} disabled={disableSavedEdit}/>
                {p.label}
              </label>
            );
          })}
        </div>
        <div className="text-xs text-gray-500 mt-2">Toggled fields are hidden from the header and printout but remain in history if previously filled.</div>
      </div>

      {/* Toggle header hints editor (Admin only) */}
      {canAdmin&&(
        <div className="mt-3">
          <label className="text-xs flex items-center gap-2">
            <input type="checkbox" checked={showHeaderHints} onChange={(e)=>setShowHeaderHints(e.target.checked)}/>
            Edit header placeholders / branding / section visibility
          </label>
          {showHeaderHints&&(
            <div className="mt-2 grid grid-cols-1 md:grid-cols-3 gap-3 border rounded p-3">
              {Object.keys(DEFAULT_HEADER_META()).filter(k=>!k.endsWith('_value')).map((k)=>(
                <label key={k} className="flex flex-col gap-1">
                  <span className="text-xs text-gray-600">{k} {k.includes('signed_at') ? '(ISO timestamp, auto-filled by Sign)' : 'placeholder'}</span>
                  <input className="border rounded px-2 py-1"
                         value={headerMeta[k]||''}
                         onChange={(e)=>setForm((f)=>({...f, header_meta:{...(f.header_meta||{}), [k]:e.target.value}}))}/>
                </label>
              ))}
              <div className="md:col-span-3 grid grid-cols-1 md:grid-cols-3 gap-3">
                <label className="text-xs flex items-center gap-2 border rounded px-2 py-1">
                  <input type="checkbox" checked={headerMeta.show_visual!==false} onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_visual:e.target.checked}}))}/>
                  Show Visual section
                </label>
                <label className="text-xs flex items-center gap-2 border rounded px-2 py-1">
                  <input type="checkbox" checked={headerMeta.show_doc!==false} onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_doc:e.target.checked}}))}/>
                  Show Documentation section
                </label>
                <label className="text-xs flex items-center gap-2 border rounded px-2 py-1">
                  <input type="checkbox" checked={headerMeta.show_test!==false} onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_test:e.target.checked}}))}/>
                  Show Tests section
                </label>
              </div>
              <div className="md:col-span-3 flex items-center gap-2">
                <button className="border rounded px-2 py-1 text-xs" onClick={resetHeaderPlaceholdersFromTemplate}>
                  Reset header placeholders from current link’s template
                </button>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Header details + linkage (respect show_* flags) */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        {/* SOP/Version/Effective */}
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">SOP Reference</span>
          <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                 value={form.sop_reference||''}
                 onChange={(e)=>setForm({...form,sop_reference:e.target.value})}
                 placeholder={headerMeta.sop_reference}
                 disabled={disableSavedEdit}/>
        </label>
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Version</span>
          <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                 value={form.version||''}
                 onChange={(e)=>setForm({...form,version:e.target.value})}
                 placeholder={headerMeta.version}
                 disabled={disableSavedEdit}/>
        </label>
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Effective Date</span>
          <input type="date" className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                 value={form.effective_date||''}
                 onChange={(e)=>setForm({...form,effective_date:e.target.value})}
                 placeholder={headerMeta.effective_date}
                 disabled={disableSavedEdit}/>
        </label>

        {/* Prepared/Reviewed/Approved + Sign buttons */}
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Prepared By</span>
          <div className="flex gap-2">
            <input className={cls('border rounded-md px-3 py-2 flex-1',disableSavedEdit&&'bg-gray-100')}
                   value={form.prepared_by||''}
                   onChange={(e)=>setForm({...form,prepared_by:e.target.value})}
                   placeholder={headerMeta.prepared_by}
                   disabled={disableSavedEdit}/>
            {!disableSavedEdit && <button className="border rounded px-2 text-xs" onClick={()=>stampSignature('prepared')}>Sign</button>}
          </div>
          <div className="text-xs text-gray-500">Signed at: {fmtDT(headerMeta.prepared_signed_at)}</div>
        </label>
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Reviewed By</span>
          <div className="flex gap-2">
            <input className={cls('border rounded-md px-3 py-2 flex-1',disableSavedEdit&&'bg-gray-100')}
                   value={form.reviewed_by||''}
                   onChange={(e)=>setForm({...form,reviewed_by:e.target.value})}
                   placeholder={headerMeta.reviewed_by}
                   disabled={disableSavedEdit}/>
            {!disableSavedEdit && <button className="border rounded px-2 text-xs" onClick={()=>stampSignature('reviewed')}>Sign</button>}
          </div>
          <div className="text-xs text-gray-500">Signed at: {fmtDT(headerMeta.reviewed_signed_at)}</div>
        </label>
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Approved By</span>
          <div className="flex gap-2">
            <input className={cls('border rounded-md px-3 py-2 flex-1',disableSavedEdit&&'bg-gray-100')}
                   value={form.approved_by||''}
                   onChange={(e)=>setForm({...form,approved_by:e.target.value})}
                   placeholder={headerMeta.approved_by}
                   disabled={disableSavedEdit}/>
            {!disableSavedEdit && <button className="border rounded px-2 text-xs" onClick={()=>stampSignature('approved')}>Sign</button>}
          </div>
          <div className="text-xs text-gray-500">Signed at: {fmtDT(form.approved_at || headerMeta.approved_signed_at)}</div>
        </label>

        {/* Predefined fields */}
        {headerMeta.show_material_name!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Material Name</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.material_name||''}
                   onChange={(e)=>setForm({...form,material_name:e.target.value})}
                   placeholder={headerMeta.material_name}
                   disabled={disableSavedEdit}/>
          </label>
        )}
        {headerMeta.show_batch_no!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Batch/Lot No.</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.batch_no||''}
                   onChange={(e)=>setForm({...form,batch_no:e.target.value})}
                   placeholder={headerMeta.batch_no}
                   disabled={disableSavedEdit}/>
          </label>
        )}
        {headerMeta.show_supplier!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Supplier/Vendor</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.supplier||''}
                   onChange={(e)=>setForm({...form,supplier:e.target.value})}
                   placeholder={headerMeta.supplier}
                   disabled={disableSavedEdit}/>
          </label>
        )}

        {headerMeta.show_date_of_receipt!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Date of Receipt</span>
            <input type="date" className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.date_of_receipt||''}
                   onChange={(e)=>setForm({...form,date_of_receipt:e.target.value})}
                   placeholder={headerMeta.date_of_receipt}
                   disabled={disableSavedEdit}/>
          </label>
        )}
        {headerMeta.show_quantity_received!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Quantity Received</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.quantity_received||''}
                   onChange={(e)=>setForm({...form,quantity_received:e.target.value})}
                   placeholder={headerMeta.quantity_received}
                   disabled={disableSavedEdit}/>
          </label>
        )}
        {headerMeta.show_storage_condition!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Storage Condition</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.storage_condition||''}
                   onChange={(e)=>setForm({...form,storage_condition:e.target.value})}
                   placeholder={headerMeta.storage_condition}
                   disabled={disableSavedEdit}/>
          </label>
        )}

        {headerMeta.show_inspection_date!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Inspection Date</span>
            <input type="date" className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.inspection_date||''}
                   onChange={(e)=>setForm({...form,inspection_date:e.target.value})}
                   placeholder={headerMeta.inspection_date}
                   disabled={disableSavedEdit}/>
          </label>
        )}
        {headerMeta.show_inspected_by!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Inspected By</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.inspected_by||''}
                   onChange={(e)=>setForm({...form,inspected_by:e.target.value})}
                   placeholder={headerMeta.inspected_by}
                   disabled={disableSavedEdit}/>
          </label>
        )}

        {/* Linkage */}
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Linked Module</span>
          <select className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                  value={form.linked_module||''}
                  onChange={(e)=>setForm({...form,linked_module:e.target.value})}
                  disabled={disableSavedEdit}>
            <option value="">— Select —</option>
            {modules.map((m)=><option key={m.module_id} value={m.module_id}>{m.module_name}</option>)}
          </select>
        </label>
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Linked Submodule</span>
          <select className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                  value={form.linked_submodule||''}
                  onChange={(e)=>setForm({...form,linked_submodule:e.target.value})}
                  disabled={disableSavedEdit}>
            <option value="">— Select —</option>
            {submodsForModule.map((s)=><option key={s.submodule_id} value={s.submodule_id}>{s.submodule_name}</option>)}
          </select>
        </label>
        {headerMeta.show_linked_entity_id!==false && (
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Linked Entity ID</span>
            <input className={cls('border rounded-md px-3 py-2',disableSavedEdit&&'bg-gray-100')}
                   value={form.linked_entity_id||''}
                   onChange={(e)=>setForm({...form,linked_entity_id:e.target.value})}
                   placeholder="e.g., GRN-2025-000123"
                   disabled={disableSavedEdit}/>
          </label>
        )}
      </div>

      {/* Sections manager (show/hide & title editors) */}
      <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="flex flex-col gap-1">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Section Title (Visual)</span>
            <label className="text-xs flex items-center gap-1">
              <input
                type="checkbox"
                checked={headerMeta.show_visual!==false}
                onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_visual:e.target.checked}}))}
              />
              Show
            </label>
          </div>
          <input className={cls('border rounded-md px-3 py-2',(!headerMeta.show_visual||disableSavedEdit)&&'bg-gray-100')}
                 value={form.visual_title||''}
                 onChange={(e)=>setForm({...form,visual_title:e.target.value})}
                 disabled={!headerMeta.show_visual||disableSavedEdit}/>
        </div>

        <div className="flex flex-col gap-1">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Section Title (Docs)</span>
            <label className="text-xs flex items-center gap-1">
              <input
                type="checkbox"
                checked={headerMeta.show_doc!==false}
                onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_doc:e.target.checked}}))}
              />
              Show
            </label>
          </div>
          <input className={cls('border rounded-md px-3 py-2',(!headerMeta.show_doc||disableSavedEdit)&&'bg-gray-100')}
                 value={form.doc_title||''}
                 onChange={(e)=>setForm({...form,doc_title:e.target.value})}
                 disabled={!headerMeta.show_doc||disableSavedEdit}/>
        </div>

        <div className="flex flex-col gap-1">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Section Title (Tests)</span>
            <label className="text-xs flex items-center gap-1">
              <input
                type="checkbox"
                checked={headerMeta.show_test!==false}
                onChange={(e)=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_test:e.target.checked}}))}
              />
              Show
            </label>
          </div>
          <input className={cls('border rounded-md px-3 py-2',(!headerMeta.show_test||disableSavedEdit)&&'bg-gray-100')}
                 value={form.test_title||''}
                 onChange={(e)=>setForm({...form,test_title:e.target.value})}
                 disabled={!headerMeta.show_test||disableSavedEdit}/>
        </div>
      </div>

      {/* Dynamic sections + placeholders (conditionally shown) */}
      {headerMeta.show_visual!==false && (
        <>
          <DynamicGrid
            title={form.visual_title||'A. Visual Inspection'}
            columns={form.visual_cols||[]}
            rows={form.visual_inspection||[]}
            onChangeColumns={setVisualCols}
            onChangeRows={setVisualRows}
            canAdmin={canAdmin}
            readOnly={disableSavedEdit}
            currentUserEmail={email}
            onHide={()=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_visual:false}}))}
          />
          <PlaceholdersPanel
            label="Visual"
            placeholders={form.visual_placeholders||[]}
            setPlaceholders={(arr)=>setForm((f)=>({...f,visual_placeholders:arr}))}
            applyToRows={(mode)=>applyLocalPlaceholders('visual',mode)}
            disabled={disableSavedEdit}
          />
        </>
      )}

      {headerMeta.show_doc!==false && (
        <>
          <DynamicGrid
            title={form.doc_title||'B. Documentation Review'}
            columns={form.doc_cols||[]}
            rows={form.documentation_review||[]}
            onChangeColumns={setDocCols}
            onChangeRows={setDocRows}
            canAdmin={canAdmin}
            readOnly={disableSavedEdit}
            currentUserEmail={email}
            onHide={()=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_doc:false}}))}
          />
          <PlaceholdersPanel
            label="Docs"
            placeholders={form.doc_placeholders||[]}
            setPlaceholders={(arr)=>setForm((f)=>({...f,doc_placeholders:arr}))}
            applyToRows={(mode)=>applyLocalPlaceholders('doc',mode)}
            disabled={disableSavedEdit}
          />
        </>
      )}

      {headerMeta.show_test!==false && (
        <>
          <DynamicGrid
            title={form.test_title||'C. Physical/Chemical Tests (If Applicable)'}
            columns={form.test_cols||[]}
            rows={form.physical_tests||[]}
            onChangeColumns={setTestCols}
            onChangeRows={setTestRows}
            canAdmin={canAdmin}
            readOnly={disableSavedEdit}
            currentUserEmail={email}
            onHide={()=>setForm(f=>({...f, header_meta:{...(f.header_meta||{}), show_test:false}}))}
          />
          <PlaceholdersPanel
            label="Tests"
            placeholders={form.test_placeholders||[]}
            setPlaceholders={(arr)=>setForm((f)=>({...f,test_placeholders:arr}))}
            applyToRows={(mode)=>applyLocalPlaceholders('test',mode)}
            disabled={disableSavedEdit}
          />
        </>
      )}

      {/* Template Library */}
      <TemplateLibrary form={form} setForm={setForm} canAdmin={canAdmin} readOnly={disableSavedEdit}/>

      {/* Footer status/remarks */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Overall Inspection Status</span>
          <select className="border rounded-md px-3 py-2" value={form.overall_status||''} onChange={(e)=>setForm({...form,overall_status:e.target.value})} disabled={disableSavedEdit}>
            <option value="">Select</option>
            <option value="Accepted">Accepted</option>
            <option value="Rejected">Rejected</option>
            <option value="Quarantine">Quarantine</option>
          </select>
        </label>
        <div className="md:col-span-2">
          <label className="flex flex-col gap-1">
            <span className="text-sm text-gray-600">Remarks (if any)</span>
            <textarea className={cls('border rounded-md px-3 py-2 min-h-[80px]',disableSavedEdit&&'bg-gray-100')} value={form.remarks||''} onChange={(e)=>setForm({...form,remarks:e.target.value})} disabled={disableSavedEdit}/>
          </label>
        </div>
      </div>

      {/* Notes */}
      <div className="mt-6">
        <label className="flex flex-col gap-1">
          <span className="text-sm text-gray-600">Notes</span>
          <textarea className={cls('border rounded-md px-3 py-2 min-h-[100px]',disableSavedEdit&&'bg-gray-100')} value={form.notes||''} onChange={(e)=>setForm({...form,notes:e.target.value})} disabled={disableSavedEdit} placeholder="Add SOP pointers, deviations, sampling notes, etc."/>
        </label>
      </div>

      {/* Admin approve/reject */}
      {editingId&&(
        <div className="mt-4 flex flex-wrap items-center gap-2">
          <span className="text-sm">Workflow: <b>{form.workflow_status||'Draft'}</b></span>
          {canAdmin&&(
            <>
              <button onClick={()=>approveViaRPC(editingId,'Approved','')} className="inline-flex items-center gap-2 px-3 py-2 rounded-md border text-green-700"><ShieldCheck size={16}/> Approve</button>
              <button onClick={()=>{
                const reason=window.prompt('Reason for rejection (optional)','');
                approveViaRPC(editingId,'Rejected',reason||'');
              }} className="inline-flex items-center gap-2 px-3 py-2 rounded-md border text-red-700"><XCircle size={16}/> Reject</button>
            </>
          )}
        </div>
      )}

      {/* My Drafts / My Submissions filters + Refresh */}
      <div className="mt-8 border rounded-md p-3">
        <div className="flex flex-wrap items-center gap-3">
          <div className="font-semibold">Saved Records</div>
          <div className="flex items-center gap-2">
            <label className="text-xs">Owner</label>
            <select className="border rounded px-2 py-1 text-xs" value={ownerFilter} onChange={(e)=>setOwnerFilter(e.target.value)}>
              <option value="all">All</option>
              <option value="mine">My Records</option>
            </select>
          </div>
          <div className="flex items-center gap-2">
            <label className="text-xs">Workflow</label>
            <select className="border rounded px-2 py-1 text-xs" value={workflowFilter} onChange={(e)=>setWorkflowFilter(e.target.value)}>
              <option value="all">All</option>
              <option value="Draft">Draft</option>
              <option value="Submitted">Submitted / In Review</option>
              <option value="Approved">Approved</option>
              <option value="Rejected">Rejected</option>
            </select>
          </div>
          <div className="ml-auto flex items-center gap-2">
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>{setOwnerFilter('mine'); setWorkflowFilter('Draft');}}>My Drafts</button>
            <button className="border rounded px-2 py-1 text-xs" onClick={()=>{setOwnerFilter('mine'); setWorkflowFilter('Submitted');}}>My Submissions</button>
            <button className="border rounded px-2 py-1 text-xs inline-flex items-center gap-1" onClick={fetchAll}><RefreshCw size={14}/> Refresh</button>
          </div>
        </div>

        {/* Quick Search */}
        <div className="mt-4 border-t pt-3">
          <div className="flex items-center gap-2">
            <Search size={16}/>
            <div className="font-medium">Find a Checklist</div>
            <input
              className="ml-4 flex-1 border rounded px-3 py-2"
              placeholder="Search by title or version"
              value={q}
              onChange={(e)=>setQ(e.target.value)}
              onKeyDown={(e)=>{ if(e.key==='Enter') performSearch(); }}
            />
            <button className="border rounded px-3 py-2 text-xs" onClick={performSearch} disabled={searching}>
              {searching ? 'Searching…' : 'Search'}
            </button>
            <button className="border rounded px-3 py-2 text-xs" onClick={clearSearch} disabled={searching || !q}>
              Clear
            </button>
          </div>

          {/* Results (if any) */}
          {q && (
            <div className="mt-3 overflow-auto">
              <table className="min-w-[900px] w-full border rounded-md">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="border p-2 text-left">Checklist</th>
                    <th className="border p-2 text-left">Version</th>
                    <th className="border p-2 text-left">Module / Submodule</th>
                    <th className="border p-2 text-left">Status</th>
                    <th className="border p-2 text-left">Workflow</th>
                    <th className="border p-2 text-left">Prepared/Reviewed/Approved</th>
                    <th className="border p-2 w-32">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {searchResults.map(r=>(
                    <tr key={r.id}>
                      <td className="border p-2">{r.checklist_title || '-'}</td>
                      <td className="border p-2">{r.version || '-'}</td>
                      <td className="border p-2">{moduleName(r.linked_module)} / {submoduleName(r.linked_submodule)}</td>
                      <td className="border p-2">{statusLabel(r)}</td>
                      <td className="border p-2">{r.workflow_status || 'Draft'}</td>
                      <td className="border p-2">
                        <div className="text-xs leading-5">
                          <div><span className="text-gray-500">P:</span> {r.prepared_by||'-'}</div>
                          <div><span className="text-gray-500">R:</span> {r.reviewed_by||'-'}</div>
                          <div><span className="text-gray-500">A:</span> {r.approved_by||'-'}</div>
                        </div>
                      </td>
                      <td className="border p-2">
                        <button className="text-blue-600" onClick={async ()=>{
                          const {data, error} = await supabase.from('checklist_master').select('*').eq('id', r.id).single();
                          if(error){ toast.error(error.message); bumpStatus({lastOp:'search-load-error', lastError:error.message}); return; }
                          handleEdit(data);
                          window.scrollTo({top:0, behavior:'smooth'});
                        }}>
                          Edit
                        </button>
                      </td>
                    </tr>
                  ))}
                  {searchResults.length===0 && (
                    <tr><td colSpan={7} className="text-center p-3 text-gray-500">No results</td></tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
      
      {/* Records list */}
      <div className="mt-4">
        {loading?(
          <div className="flex items-center gap-2 text-gray-600"><Loader2 className="animate-spin" size={16}/> Loading...</div>
        ):(
          <div className="overflow-auto">
            <table className="min-w-[1000px] w-full border rounded-md">
              <thead className="bg-gray-50">
                <tr>
                  <th className="border p-2 text-left">Checklist</th>
                  <th className="border p-2 text-left">Version</th>
                  <th className="border p-2 text-left">Module / Submodule</th>
                  <th className="border p-2 text-left">Status</th>
                  <th className="border p-2 text-left">Workflow</th>
                  <th className="border p-2 text-left">Prepared/Reviewed/Approved</th>
                  <th className="border p-2 w-40">Actions</th>
                </tr>
              </thead>
              <tbody>
                {rows.map((r)=>{
                  const hm = r.header_meta || {};
                  return (
                    <tr key={r.id}>
                      <td className="border p-2">{r.checklist_title || hm.checklist_name_value || '-'}</td>
                      <td className="border p-2">{r.version || '-'}</td>
                      <td className="border p-2">{moduleName(r.linked_module)} / {submoduleName(r.linked_submodule)}</td>
                      <td className="border p-2">{statusLabel(r)}</td>
                      <td className="border p-2">{r.workflow_status||'Draft'}</td>
                      <td className="border p-2">
                        <div className="text-xs leading-5">
                          <div><span className="text-gray-500">P:</span> {r.prepared_by||'-'}</div>
                          <div><span className="text-gray-500">R:</span> {r.reviewed_by||'-'}</div>
                          <div><span className="text-gray-500">A:</span> {r.approved_by||'-'}</div>
                        </div>
                      </td>
                      <td className="border p-2">
                        <div className="flex items-center gap-2">
                          <button onClick={()=>handleEdit(r)} className="text-blue-600"><Edit3 size={16}/></button>
                          {canAdmin?(
                            <button onClick={()=>handleDelete(r.id)} className="text-red-600"><Trash2 size={16}/></button>
                          ):(
                            <button onClick={handlePrint} className="text-gray-700" title="Print"><Printer size={16}/></button>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
                {rows.length===0&&(<tr><td colSpan={7} className="text-center p-4 text-gray-500">No records found</td></tr>)}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Printable content (hidden until print) */}
      <div className="hidden print:block">
        <div ref={printRef}>
          <ChecklistPreview form={form} headerMeta={headerMeta} showHdr={showHdr}/>
        </div>
      </div>

      {/* Live Preview Modal */}
      {previewOpen && (
        <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[90vh] overflow-auto">
            <div className="sticky top-0 bg-white border-b p-3 flex items-center justify-between">
              <div className="font-semibold">Checklist Preview</div>
              <div className="flex items-center gap-2">
                <button
                  onClick={handlePrint}
                  className="inline-flex items-center gap-2 px-3 py-1.5 rounded-md border"
                  title="Print"
                >
                  <Printer size={16}/> Print
                </button>
                <button
                  onClick={()=>setPreviewOpen(false)}
                  className="inline-flex items-center gap-2 px-3 py-1.5 rounded-md border"
                  title="Close"
                >
                  Close
                </button>
              </div>
            </div>
            <ChecklistPreview form={form} headerMeta={headerMeta} showHdr={showHdr}/>
          </div>
        </div>
      )}

      {/* Bottom notes */}
      <div className="mt-6 text-xs text-gray-500 leading-5">
        <p>Notes:</p>
        <ul className="list-disc ml-5">
          <li>Header fields are optional. Only grid columns marked <em>required</em> are validated.</li>
          <li>The yellow banner at the top explains missing content or readiness issues.</li>
          <li>Use the Quick Search above the table or the <em>My Drafts / My Submissions</em> filters to locate records quickly.</li>
        </ul>
      </div>
    </div>
  );
};

export default CheckListMaster;
